/* Copyright (C) 2004 - 2008  db4objects Inc.  http://www.db4o.com

This file is part of the db4o open source object database.

db4o is free software; you can redistribute it and/or modify it under
the terms of version 2 of the GNU General Public License as published
by the Free Software Foundation and as clarified by db4objects' GPL 
interpretation policy, available at
http://www.db4o.com/about/company/legalpolicies/gplinterpretation/
Alternatively you can write to db4objects, Inc., 1900 S Norfolk Street,
Suite 350, San Mateo, CA 94403, USA.

db4o is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License along
with this program; if not, write to the Free Software Foundation, Inc.,
59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. */
package com.db4o.db4ounit.common.freespace;

import com.db4o.config.*;
import com.db4o.internal.*;
import com.db4o.internal.slots.*;

import db4ounit.*;
import db4ounit.extensions.*;
import db4ounit.extensions.fixtures.*;


public class FreespaceManagerReopenTestCase extends AbstractDb4oTestCase implements OptOutCS, OptOutDefragSolo {
	
	private static int SIZE = 199331;

	public static void main(String[] args) {
		new FreespaceManagerReopenTestCase().runSolo();
	}
	
	protected void configure(Configuration config) throws Exception {
		super.configure(config);
		config.bTreeNodeSize(4);
	    config.flushFileBuffers(false); // this just make the test faster
	}
	
	public void test() throws Exception{
		Slot testSlot = localContainer().getSlot(SIZE);
		Slot reserveSlot = localContainer().getSlot(SIZE / 2);
		
		reopen();
		localContainer().free(testSlot);
		localContainer().free(reserveSlot);
		
		reopen();
		Slot slot1 = localContainer().getSlot(SIZE);
		Assert.isTrue(overlap(testSlot, slot1));
		reopen();
		Slot slot2 = localContainer().getSlot(SIZE);
		Assert.isFalse(overlap(testSlot, slot2));
	}
	
	private boolean overlap(Slot slot, Slot other){
		Slot first = slot.address() < other.address() ? slot : other;
		Slot second =  slot.address() > other.address() ? slot : other;
		return first.address() + first.length() >= second.address();
	}
	
	private LocalObjectContainer localContainer(){
		return ((LocalObjectContainer)db());
	}

}
